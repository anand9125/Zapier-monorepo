// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

  model User {
    id         Int  @id @default(autoincrement())
    email      String  @unique
    name       String
    password   String
    zaps       Zap[]
  }

  model Zap{
    id            String @id @default(uuid())
    triggerId     String    // A foreign key that connects a Zap to a Trigger.
    userId         Int
    trigger       Trigger?   //Zap connects to one Trigger through the triggerId (one-to-one) every zap has one trigger
    actions       Action[]   //one to many relation with actions
    zapRuns       ZapRun[] 
    user          User @relation(fields: [userId],references: [id]) 
  }

  model Trigger{
    id                  String @id @default(uuid())
    zapId               String @unique
    availableTriggersId   String  //A foreign key connecting this Trigger to AvailableTriggers.
    metadata    Json  @default("{}")
    type                AvailableTriggers @relation(fields: [availableTriggersId],references: [id])
    zaps                Zap     @relation(fields: [zapId], references: [id])
  }
  
  model AvailableTriggers{  //eveery trigger offer some certain type of avaialietrigger 
    id         String @id @default(uuid())
    name       String
    image       String?
    triggers   Trigger[]  //A relation field connecting AvailableTriggers to multiple Trigger instances.
    //avaiable triggers on the zpaier page like calender github,...
  }

  model Action{
    id                  String @id @default(uuid())
    zapId               String
    zap                 Zap @relation(fields: [zapId], references: [id])
   metadata        Json  @default("{}")
   AvailableActionId    String //A foreign key connecting
    type                AvailableAction @relation(fields: [AvailableActionId],references: [id])
    sortingOrder        Int   @default(0)
  }


  model AvailableAction{
    id         String @id @default(uuid())
    name       String
    image String?
    actions   Action[]  //A relation field connecting AvailableAction to multiple Action instances.
    //avaiable actions on the zpaier page like send email slack,...
  }

//zapRun table is for storing the execution history of each zap run  or when trigger happens
//this table is useful when you want to track each execution and user who run it

  model ZapRun{
    id             String    @id @default(uuid())
    zapId          String
    metadata       Json                 //when everyrun triggre we have a metadata with it we are going to bw simple JSon
    zap            Zap       @relation(fields: [zapId], references: [id])
    runTime        DateTime
    zapRunOutbox   ZapRunOutbox?  //every zap run has zap run out box
  }

//now we need outbox table 
//whenever zapier run or trigger is happened whenever the trigger happens this needs to go to kafka quesue or redis queses 
//we can do diretly as th !st way kafka publihers diretly  

model ZapRunOutbox{
  id String        @id @default(uuid())
  zapRunId String  @unique
  zapRun  ZapRun   @relation(fields: [zapRunId], references: [id])

}